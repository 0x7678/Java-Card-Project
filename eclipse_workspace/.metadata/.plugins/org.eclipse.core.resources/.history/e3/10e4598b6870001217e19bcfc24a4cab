package wallet;


import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.OwnerPIN;

public class Wallet extends Applet {

/****** Constat Declaration ****/
	
	// CLA byte in the command APDU 
	final static byte Wallet_CLA = (byte) 0xB0;
	
	// INS byte in the command APDU
	final static byte VERIFY = (byte) 0x20;
	final static byte CREDIT = (byte) 0X30;
	final static byte DEBIT = (byte) 0x40;
	final static byte GET_BALANCE = (byte) 0x50;
	
	// max balance
	final static short MAX_BALANCE = 0x7fff;
	
	// maximum transaction ammount
	final static short MAX_AMOUNT = 127;
	
	// maximum number of incorrect trys befor the PIN is blocked
	final static byte PIN_TRY_LIMIT = (byte) 0x04;
	
	// maximum lenght of PIN
	final static byte PIN_SIZE = (byte) 0x04;
	
	// signal that the pin has failled
	final static short SW_VERIFICATION_FAILED = 0X6300;
	
	// signal that the PIN validation is required
	final static short SW_PIN_VERIFICATION_REQUIRED = 0X6301;
	
	// signal invalid transaction ammount
	// invalid ammount if ammount > MAX_AMMOUNT
	// or if ammound < 0
	final static short SW_INVALID_AMOUNT = 0x6A83;
	
	// signal that the balance exceeds the maximum
	final static short SW_EXCEED_MAXIMUM_BALANCE = 0x6A84;
	
	// signal the balance becomes negative
	final static short SW_NEGATIVE_BALANCE = 0x6A85;
	
/****** Instance Variable Declaration ****/
	OwnerPIN pin;
	short balance;
	
	public static void install(byte[] bArray, short bOffset, byte bLength) {
		// creat a wallate instance
		// GP-compliant JavaCard applet registration
		new Wallet(bArray, bOffset, bLength).register(bArray, (short) (bOffset + 1),
				bArray[bOffset]);
	}
	
	private Wallet (byte[] bArray, short bOffset, byte bLength) {
		//as suggested Its good practice to allocate all the
		//needed memory the applet uses during its lifetime
		pin = new OwnerPIN (PIN_TRY_LIMIT, PIN_SIZE);
		
//		 bArray contains the default PIN initialization value (12345)
		bArray[0] = 01;
		bArray[1] = 02;
		bArray[2] = 03;
		bArray[3] = 04;
		bArray[4] = 05;
		bOffset = 0;
		bLength = 5;
		
		// initialization
		/*value*/ pin.update(bArray, bOffset, bLength);
		register();
	}
	
	
	public boolean select(){
		//the applet cant be selected if the pin is blocked
		if(pin.getTriesRemaining() == 0) return false;
		else return true;
	}

	public void deselect(){
		// reset pin value
		pin.reset();
	}
	
	
	public void process(APDU apdu) {
		// Good practice: Return 9000 on SELECT
		if (selectingApplet()) {
			return;
		}

		byte[] buf = apdu.getBuffer();
		switch (buf[ISO7816.OFFSET_INS]) {
		case GET_BALANCE : getBalance(apdu);
			return;
		case DEBIT : debit(apdu);
			return;
		case CREDIT: credit(apdu);
			return;
		case VERIFY: verify(apdu);
			return;
		default:
			// good practice: If you don't know the INStruction, say so:
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		}
	}
	
	/* in the CREDIT method,the data field of the apdu sent from the CAD, contains 
	 * the ammount of money to be added to the balance 
	 */
	
	private void credit(APDU apdu){
		// autenticatio via PIN
		if(! pin.isValidated()) ISOException.throwIt(SW_PIN_VERIFICATION_REQUIRED);
		
		byte[] buffer = apdu.getBuffer();
		 //Lc byte denotes the number of bytes in the
		 //data field of the command APDU
		byte numBytes = buffer[ISO7816.OFFSET_LC];
		
		// indicate that this APDU has incoming data
		// and receive data starting at the offset
		// ISO7816.OFFSET_CDATA following the 5 header
		// bytes.
		byte byteRead = (byte)(apdu.setIncomingAndReceive());
		
		// Error handling
		// it is an error if the number of data bytes
		// read does not match the number in Lc byte
		if (byteRead != 1) ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		// get the credit amount
		byte creditAmount = buffer[ISO7816.OFFSET_CDATA];
		
		// check the credit amount
		if ( ( creditAmount > MAX_AMOUNT) || ( creditAmount < 0 ) )
		ISOException.throwIt(SW_INVALID_AMOUNT);
		
		// check the new balance
		if ( ( balance + creditAmount) > MAX_BALANCE ) ISOException.throwIt(SW_EXCEED_MAXIMUM_BALANCE);
		
		// else add the amount
		balance = (short)(balance + creditAmount);
	}
	
	/* in the DEBIT method,the data field of the apdu sent from the CAD, contains 
	 * the ammount of money to be subtracted from the balance 
	 */
	
	private void debit(APDU apdu) {
		
		// autenticatio via PIN
		if ( ! pin.isValidated()) ISOException.throwIt(SW_PIN_VERIFICATION_REQUIRED);
		
		byte[] buffer = apdu.getBuffer();
		byte numBytes = (byte)(buffer[ISO7816.OFFSET_LC]);
		byte byteRead = (byte)(apdu.setIncomingAndReceive());
		// Error handling
		if (byteRead != 1) ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		// get debit amount
		byte debitAmount = buffer[ISO7816.OFFSET_CDATA];
		
		// check debit amount
		if ( ( debitAmount > MAX_BALANCE) || (debitAmount < 0 ) )
		ISOException.throwIt(SW_INVALID_AMOUNT);
		
		// check the new balance
		if ( ( balance - debitAmount) < 0 ) ISOException.throwIt(SW_NEGATIVE_BALANCE);
		balance = (short) (balance - debitAmount);
		}
	
	/* the GETbALANCE method return the balance of the wallet.
	 * N.B. since the data field of the response APDU is ALWAYS optional,
	 * the applet needs to exlicitly inform the JCRE of the aditional data
	 */
	
	private void getBalance(APDU apdu) {
		
		byte[] buffer = apdu.getBuffer();
		// inform system that the applet has finished
		// processing the command and the system should
		// now prepare to construct a response APDU
		// which contains data field
		
		short le = apdu.setOutgoing();
		if ( le < 2 ) ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		//informs the CAD the actual number of bytes
		//returned
		apdu.setOutgoingLength((byte)2);
		
		// move the balance data into the APDU buffer
		// starting at the offset 0
		buffer[0] = (byte)(balance >> 8  );
		buffer[1] = (byte)(balance & 0xFF);
		// send the 2-balance byte at the offset
		// 0 in the apdu buffer
		apdu.sendBytes((short)0, (short)2);
		}

	private void verify(APDU apdu) {
		
		byte[] buffer = apdu.getBuffer();
		
		// retrieve the PIN data for validation.
		byte byteRead = (byte)(apdu.setIncomingAndReceive());
		
		// check pin
		// the PIN data is read into the APDU buffer
		// at the offset ISO7816.OFFSET_CDATA
		// the PIN data length = byteRead
		if ( pin.check(buffer, ISO7816.OFFSET_CDATA,byteRead) == false )
		ISOException.throwIt(SW_VERIFICATION_FAILED);
		}
}

